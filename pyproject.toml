[tool.ruff.lint]
select = ["I"]  # I = isort
extend-select = ["F401"]  # F401 = unused-import

[tool.pyright]
# https://microsoft.github.io/pyright/#/configuration?id=sample-pyprojecttoml-file

## Run options
include = [
  "src",
  "bin",
  "tests",
]
ignore = []

verboseOutput = true

reportMissingImports = "error"
reportMissingTypeStubs = false

pythonVersion = "3.11"
pythonPlatform = "Linux"

useLibraryCodeForTypes = true

## Type hinting options
# Disallow list[Any] and set[any], forces to fully type them.
strictListInference = true
strictSetInference = true
# Allow dict[Any] as complex dict structures make typing irelevant.
strictDictionaryInference = false

# Analyse everything
analyzeUnannotatedFunctions = true

# Allow implicit optional in function parameter definition.
# def foo(param: int = None) -> None:
strictParameterNoneValue = false

enableTypeIgnoreComments = true  # Allows  # type: ignore

deprecateTypingAliases = true  # Deprecates the use of typing.List, Dict, ...

## Type checking rules
# When a class @property getter and setter have different types.
reportPropertyTypeMismatch = "error"

# Cyclical import chains slow down type analysis and hint at architectural layering issues.
reportImportCycles = "error"

reportUnusedImport = "error"

reportDuplicateImport = "error"

reportWildcardImportFromLibrary = "error"

reportUntypedFunctionDecorator = "error"

reportUntypedClassDecorator = "error"

reportUntypedBaseClass = "error"

reportUntypedNamedTuple = "error"

reportPrivateUsage = "error"

reportTypeCommentUsage = "error"

reportPrivateImportUsage = "error"

reportConstantRedefinition = "error"

# reportDeprecated [boolean or string, optional]: Generate or suppress diagnostics for use of a class or function that has been marked as deprecated. The default value for this setting is "none".

reportInconsistentConstructor = "error"

reportUninitializedInstanceVariable = "error"

# Disallow input or return parameters for functions or methods that have an unknown type
reportUnknownParameterType = "error"
reportUnknownArgumentType = "error"
reportUnknownLambdaType = "error"
reportUnknownVariableType = "error"
reportUnknownMemberType = "error"

reportMissingParameterType = "error"
reportMissingTypeArgument = "error"

reportCallInDefaultInitializer = "warning"

reportUnnecessaryIsInstance = "error"
reportUnnecessaryCast = "error"
reportUnnecessaryComparison = "error"
reportUnnecessaryContains = "error"
reportAssertAlwaysTrue = "error"
reportImplicitStringConcatenation = "warning"

reportUnusedExpression = "error"

reportUnnecessaryTypeIgnoreComment = "error"

reportMatchNotExhaustive = "error"

reportUnreachable = "error"

reportImplicitOverride = "error"
